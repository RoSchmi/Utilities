#include <cstring>
#include <gtest/gtest.h>

#include <Utilities/Cryptography.h>

using namespace Utilities;

TEST(SHA512, ValidOutput) {
	uint8 outputHash[Cryptography::SHA512_LENGTH];
	uint8 desiredHash[Cryptography::SHA512_LENGTH] = {0xf7, 0xfb, 0xba, 0x6e, 0x06, 0x36, 0xf8, 0x90, 0xe5, 0x6f, 0xbb, 0xf3, 0x28, 0x3e, 0x52, 0x4c, 0x6f, 0xa3, 0x20, 0x4a, 0xe2, 0x98, 0x38, 0x2d, 0x62, 0x47, 0x41, 0xd0, 0xdc, 0x66, 0x38, 0x32, 0x6e, 0x28, 0x2c, 0x41, 0xbe, 0x5e, 0x42, 0x54, 0xd8, 0x82, 0x07, 0x72, 0xc5, 0x51, 0x8a, 0x2c, 0x5a, 0x8c, 0x0c, 0x7f, 0x7e, 0xda, 0x19, 0x59, 0x4a, 0x7e, 0xb5, 0x39, 0x45, 0x3e, 0x1e, 0xd7};
	const int8* hashSource = "foo";

	Cryptography::SHA512(reinterpret_cast<const uint8*>(hashSource), 3, outputHash);

	EXPECT_EQ(0, memcmp(outputHash, desiredHash, Cryptography::SHA512_LENGTH));
}

TEST(SHA1, ValidOutput) {
	uint8 outputHash[Cryptography::SHA1_LENGTH];
	uint8 desiredHash[Cryptography::SHA1_LENGTH] = {0x0b, 0xee, 0xc7, 0xb5, 0xea, 0x3f, 0x0f, 0xdb, 0xc9, 0x5d, 0x0d, 0xd4, 0x7f, 0x3c, 0x5b, 0xc2, 0x75, 0xda, 0x8a, 0x33};
	const int8* hashSource = "foo";

	Cryptography::SHA1(reinterpret_cast<const uint8*>(hashSource), 3, outputHash);

	EXPECT_EQ(0, memcmp(outputHash, desiredHash, Cryptography::SHA1_LENGTH));
}
